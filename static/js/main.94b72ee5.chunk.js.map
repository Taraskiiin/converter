{"version":3,"sources":["styles.ts","components/CryptoTable/index.tsx","components/ConverterBlock/index.tsx","App.tsx","stores/converterStore.ts","stores/index.ts","stores/currenciesStore.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","padding","spacing","paper","textAlign","color","palette","text","secondary","input__box","marginTop","marginBottom","currencyInput","minWidth","marginRight","currencyType","table","currencyIcon","width","height","redColumn","backgroundColor","greenColumn","rowCurrency","cursor","CryptoTable","inject","observer","classes","currenciesStore","converterStore","items","getItems","diffObj","getDiffObj","React","useEffect","fetchCoins","setInterval","TableContainer","component","Paper","Table","stickyHeader","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","length","map","item","onClick","coin","setSelectedCoin","hover","key","name","src","imageUrl","alt","fullName","price","volume24Hour","reducer","state","action","type","payload","value","String","Number","inPrice","outPrice","in","out","ConverterBlock","useState","selectedOutCoin","setSelectedOutCoin","getSelectedCoin","find","obj","useReducer","value1","value2","dispatch","coins","FormControl","TextField","onChange","e","target","error","fullWidth","label","InputLabel","shrink","id","Select","MenuItem","App","Container","fixed","maxWidth","Grid","container","xs","ConverterStore","this","selectedCoin","observable","computed","stores","arr1","arr2","filter","index","diffCurrencies","reduce","initObj","newObj","o","oldObj","itemObj","setTimeout","axios","get","then","data","Data","CoinInfo","Name","FullName","ImageUrl","RAW","USD","PRICE","toFixed","parseInt","VOLUME24HOUR","setItems","store","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94b72ee5.chunk.js","sourcesContent":["import { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      padding: theme.spacing(10),\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: \"center\",\r\n      color: theme.palette.text.secondary,\r\n    },\r\n    input__box: {\r\n      marginTop: 20,\r\n      marginBottom: 20,\r\n    },\r\n    currencyInput: {\r\n      minWidth: \"calc(70% - 10px)\",\r\n      marginRight: 10,\r\n    },\r\n    currencyType: {\r\n      minWidth: \"30%\",\r\n    },\r\n    table: {\r\n      minWidth: 650,\r\n    },\r\n    currencyIcon: {\r\n      width: 20,\r\n      height: 20,\r\n    },\r\n    redColumn: {\r\n      backgroundColor: \"#ffdada\",\r\n    },\r\n    greenColumn: {\r\n      backgroundColor: \"#d8ffc4\",\r\n    },\r\n    rowCurrency: {\r\n      cursor: 'pointer',\r\n    }\r\n  })\r\n);\r\nexport default useStyles;","import React from \"react\";\r\nimport { observer, inject } from \"mobx-react\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport { TCoin, TCoinDiff } from \"../../types\";\r\nimport CurrenciesStore from \"../../stores/currenciesStore\";\r\nimport ConverterStore from \"../../stores/converterStore\";\r\n\r\ninterface ICryptoTable {\r\n  classes: any;\r\n  currenciesStore?: CurrenciesStore;\r\n  converterStore?: ConverterStore;\r\n}\r\n\r\nconst CryptoTable = inject(\r\n  \"currenciesStore\",\r\n  \"converterStore\"\r\n)(\r\n  observer(({ classes, currenciesStore, converterStore }: ICryptoTable) => {\r\n    const items: TCoin[] = currenciesStore!.getItems;\r\n    const diffObj: TCoinDiff = currenciesStore!.getDiffObj;\r\n    React.useEffect(() => {\r\n      if (currenciesStore) {\r\n        currenciesStore.fetchCoins();\r\n        setInterval(() => {\r\n          currenciesStore.fetchCoins();\r\n        }, 30 * 1000);\r\n      }\r\n    }, []);\r\n\r\n    const onClickRow = (coin: TCoin) => {\r\n      if (converterStore) {\r\n        converterStore.setSelectedCoin(coin);\r\n      }\r\n    };\r\n\r\n    return (\r\n      <TableContainer component={Paper}>\r\n        <Table stickyHeader className={classes.table} aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell align=\"left\"></TableCell>\r\n              <TableCell align=\"left\">Name</TableCell>\r\n              <TableCell align=\"left\">Full&nbsp;name</TableCell>\r\n              <TableCell align=\"left\">Price</TableCell>\r\n              <TableCell align=\"left\">\r\n                Volume&nbsp;last&nbsp;24&nbsp;hours\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {!items.length\r\n              ? \"Loading...\"\r\n              : items.map((item) => (\r\n                  <TableRow\r\n                    onClick = {() => onClickRow(item)}\r\n                    className={classes.rowCurrency}\r\n                    hover\r\n                    key={item.name}\r\n                  >\r\n                    <TableCell align=\"left\">\r\n                      <img\r\n                        className={classes.currencyIcon}\r\n                        src={item.imageUrl}\r\n                        alt=\"Coin icon\"\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell align=\"left\">{item.name}</TableCell>\r\n                    <TableCell align=\"left\">{item.fullName}</TableCell>\r\n                    <TableCell\r\n                      className={\r\n                        diffObj[item.name] &&\r\n                        classes[`${diffObj[item.name]}Column`]\r\n                      }\r\n                      align=\"left\"\r\n                    >\r\n                      ${item.price}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\">${item.volume24Hour}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    );\r\n  })\r\n);\r\n\r\nexport default CryptoTable;\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport { inject, observer } from \"mobx-react\";\r\nimport CurrenciesStore from \"../../stores/currenciesStore\";\r\nimport ConverterStore from \"../../stores/converterStore\";\r\nimport { TSelectedCoin } from \"../../types\";\r\n\r\ntype IConverterBlock = {\r\n  classes: any;\r\n  currenciesStore?: CurrenciesStore;\r\n  converterStore?: ConverterStore;\r\n};\r\n\r\ntype TReduserState = {\r\n  value1: string;\r\n  value2: string;\r\n  inPrice: any;\r\n  outPrice: any;\r\n};\r\n\r\ntype TSetValue1Action = {\r\n  type: string;\r\n  payload: string;\r\n};\r\n\r\ntype TAction = TSetValue1Action;\r\n\r\nfunction reducer(state: TReduserState, action: any): TReduserState {\r\n  switch (action.type) {\r\n    case \"SET_VALUE\":\r\n      return {\r\n        ...state,\r\n        [action.payload.name]: action.payload.value,\r\n        value2: String(\r\n          (Number(action.payload.value) * state.inPrice) / state.outPrice\r\n        ),\r\n      };\r\n    case \"SET_PRICES\":\r\n      return {\r\n        ...state,\r\n        inPrice: action.payload.in,\r\n        outPrice: action.payload.out,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst ConverterBlock: React.FC<IConverterBlock> = inject(\r\n  \"currenciesStore\",\r\n  \"converterStore\"\r\n)(\r\n  observer(({ classes, currenciesStore, converterStore }) => {\r\n    const [selectedOutCoin, setSelectedOutCoin] = React.useState(\"USD\");\r\n    const inPrice = Number(converterStore?.getSelectedCoin.price) || 0;\r\n    const outPrice = Number(currenciesStore!.getItems.find(obj => obj.name === selectedOutCoin)?.price) || 0;\r\n    const [state, dispatch] = React.useReducer(reducer, {\r\n      value1: \"\",\r\n      value2: \"\",\r\n      inPrice,\r\n      outPrice,\r\n    });\r\n    \r\n    const coins: string[] = currenciesStore!.getItems.map((coin) => coin.name);\r\n\r\n    React.useEffect(() => {\r\n      dispatch({\r\n        type: 'SET_PRICES',\r\n        payload: {\r\n          in:  inPrice,\r\n          out: outPrice,\r\n        },\r\n      });\r\n    }, [inPrice, outPrice]);\r\n\r\n    const onUpdateField = (name: string, value: string) => {\r\n      dispatch({\r\n        type: \"SET_VALUE\",\r\n        payload: {\r\n          name,\r\n          value,\r\n        },\r\n      });\r\n    };\r\n\r\n    return (\r\n      <Paper className={classes.paper}>\r\n        <div className={classes.input__box}>\r\n          <FormControl className={classes.currencyInput}>\r\n            <TextField\r\n              type=\"number\"\r\n              value={state.value1}\r\n              onChange={(e: any) => onUpdateField(\"value1\", e.target.value)}\r\n              error\r\n              fullWidth\r\n              label=\"Сумма\"\r\n            />\r\n          </FormControl>\r\n          <FormControl className={classes.currencyType}>\r\n            <InputLabel shrink id=\"demo-simple-select-placeholder-label-lable\">\r\n              Валюта\r\n            </InputLabel>\r\n            <Select value={converterStore?.getSelectedCoin.name}>\r\n              {coins.map((name) => (\r\n                <MenuItem value={name}>{name}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n        <div className={classes.input__box}>\r\n          <FormControl className={classes.currencyInput}>\r\n            <TextField\r\n              type=\"number\"\r\n              value={state.value2}\r\n              error\r\n              fullWidth\r\n              label=\"Сумма\"\r\n            />\r\n          </FormControl>\r\n          <FormControl className={classes.currencyType}>\r\n            <InputLabel shrink id=\"demo-simple-select-placeholder-label-lable\">\r\n              Валюта\r\n            </InputLabel>\r\n            <Select\r\n              onChange={(e) => setSelectedOutCoin(e.target.value as string)}\r\n              value={selectedOutCoin}\r\n            >\r\n              <MenuItem value=\"USD\">USD</MenuItem>\r\n              {coins.map((name) => (\r\n                <MenuItem value={name}>{name}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n      </Paper>\r\n    );\r\n  })\r\n);\r\n\r\nexport default ConverterBlock;\r\n","import React from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport useStyles from './styles'\nimport { ConverterBlock, CryptoTable } from \"./components\";\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <Container className={classes.root} fixed maxWidth=\"lg\">\n      <Grid container spacing={3}>\n        <Grid item xs={8}>\n          <CryptoTable classes={classes} />\n        </Grid>\n        <Grid item xs={4}>\n          <ConverterBlock classes={classes} />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\nexport default App;\n","import { observable, computed, action } from \"mobx\";\r\nimport { TCoin, TCoinDiff } from \"../types\";\r\n\r\ntype TSelectedCoin = {\r\n  name: string;\r\n  price: number;\r\n};\r\n\r\nclass ConverterStore {\r\n  @observable private selectedCoin: TSelectedCoin = {\r\n    name: \" \",\r\n    price: 0,\r\n  };\r\n\r\n  @computed\r\n  get getSelectedCoin() {\r\n    return this.selectedCoin;\r\n  }\r\n\r\n  @action\r\n  setSelectedCoin(coin: TCoin) {\r\n    this.selectedCoin = {\r\n      name: coin.name,\r\n      price: coin.price,\r\n    };\r\n  }\r\n}\r\nexport default ConverterStore;\r\n","import ConverterStore from \"./converterStore\";\r\nimport CurrenciesStore from \"./currenciesStore\";\r\n\r\nconst stores = {\r\n    currenciesStore: new CurrenciesStore(),\r\n    converterStore: new ConverterStore(),\r\n}\r\n\r\nexport default stores;","import axios from \"axios\";\r\nimport { observable, computed, action } from \"mobx\";\r\nimport { TCoin, TCoinDiff, TSelectedCoin } from \"../types\";\r\nimport store from '../stores'\r\nclass CurrenciesStore {\r\n  @observable private items: TCoin[] = [];\r\n  @observable private diffObj: TCoinDiff = {};\r\n  @computed\r\n  get getItems() {\r\n    return this.items;\r\n  }\r\n  @computed\r\n  get getDiffObj() {\r\n    return this.diffObj;\r\n  }\r\n  @action\r\n  setItems = (items: TCoin[]): void => {\r\n    this.diffObj = this.diffCurrencies(this.items, items).reduce(\r\n      (initObj: TCoinDiff, obj: TCoin) => {\r\n        const newObj: TCoin = items.find(o => o.name === obj.name)!;\r\n        const oldObj: TCoin =\r\n          this.items.find((itemObj) => itemObj.name === newObj.name)!;\r\n        const color: string =\r\n          newObj.price === oldObj.price\r\n            ? \" \"\r\n            : newObj.price > oldObj.price\r\n            ? \"green\"\r\n            : \"red\";\r\n        initObj[newObj.name] = color;\r\n        return initObj;\r\n      },\r\n      {}\r\n    );\r\n    this.items = items;\r\n    setTimeout(() => {\r\n      this.diffObj = {};\r\n    }, 15000)\r\n  };\r\n  @action\r\n  fetchCoins = () => {\r\n    axios\r\n      .get(\r\n        \"https://min-api.cryptocompare.com/data/top/totalvolfull?limit-10&tsym=USD\"\r\n      )\r\n      .then(({ data }) => {\r\n        const coins: TCoin[] = data.Data.map((coin: any) => {\r\n          const obj = {\r\n            name: coin.CoinInfo.Name,\r\n            fullName: coin.CoinInfo.FullName,\r\n            imageUrl: `https://www.cryptocompare.com/${coin.CoinInfo.ImageUrl}`,\r\n            price: coin.RAW.USD.PRICE.toFixed(3),\r\n            volume24Hour: parseInt(coin.RAW.USD.VOLUME24HOUR),\r\n          };\r\n          return obj;\r\n        });\r\n        this.setItems(coins);\r\n        store.converterStore.setSelectedCoin(coins[0]);\r\n      });\r\n  };\r\n  diffCurrencies(arr1: TCoin[], arr2: TCoin[]) {\r\n    return arr1.filter((obj, index) => {\r\n      if (obj.price !== arr2[index].price) {\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n  }\r\n}\r\nexport default CurrenciesStore;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from \"mobx-react\";\n\nimport stores from './stores'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider {...stores}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}